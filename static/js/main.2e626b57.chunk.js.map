{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","TodoItem","onClick","handleTodoComplete","todo","onBlur","handleTodoBlur","handleTodoUpdate","handleTodoRemove","TodoList","todos","map","TodoListApp","setTodos","a","joke","jokeID","newTodosState","i","fetch","r","json","data","chuck","push","find","filter","length","classList","add","remove","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.2e626b57.chunk.js","sourcesContent":["// Import dependencies\r\nimport * as React from 'react'\r\nimport shortid from 'shortid'\r\n\r\n// Import interfaces\r\nimport {TodoInterface, TodoFormInterface} from './../interfaces'\r\n\r\n// Todo form component\r\nconst TodoForm = (props: TodoFormInterface) => {\r\n\r\n  // Create ref for form input\r\n  const inputRef = React.useRef<HTMLInputElement>(null)\r\n  // Create form state\r\n  const [formState, setFormState] = React.useState('')\r\n\r\n  // Handle todo input change\r\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    // Update form state with the text from input\r\n    setFormState(event.target.value)\r\n  }\r\n\r\n  // Handle 'Enter' in todo input\r\n  function handleInputEnter(event: React.KeyboardEvent) {\r\n    // Check for 'Enter' key\r\n    if (event.key === 'Enter') {\r\n      // Prepare new todo object\r\n      const newTodo: TodoInterface = {\r\n        id: shortid.generate(),\r\n        text: formState,\r\n        isCompleted: false\r\n      }\r\n\r\n      // Create new todo item\r\n      props.handleTodoCreate(newTodo)\r\n\r\n      // Reset the input field\r\n      if (inputRef && inputRef.current) {\r\n        inputRef.current.value = ''\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-form\">\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder='Enter new todo'\r\n        onChange={event => handleInputChange(event)}\r\n        onKeyPress={event => handleInputEnter(event)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoForm","// Import dependencies\r\nimport * as React from 'react'\r\n\r\n// Import interfaces\r\nimport { TodoItemInterface } from './../interfaces'\r\n\r\n// TodoItem component\r\nconst TodoItem = (props: TodoItemInterface) => {\r\n  return (\r\n    <div className='todo-item'>\r\n      <div onClick={() => props.handleTodoComplete(props.todo.id)}>\r\n        {props.todo.isCompleted ? (\r\n          <span className=\"todo-item-checked\">✔</span>\r\n        ) : (\r\n          <span className=\"todo-item-unchecked\" />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"todo-item-input-wrapper\">\r\n        <input\r\n          value={props.todo.text}\r\n          onBlur={props.handleTodoBlur}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.handleTodoUpdate(event, props.todo.id)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"item-remove\" onClick={() => props.handleTodoRemove(props.todo.id)}>\r\n        ⨯\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem","// Import dependencies\r\nimport * as React from 'react'\r\n\r\n// Import TodoItem\r\nimport TodoItem from './todo-item'\r\n\r\n// Import interfaces\r\nimport { TodoListInterface } from './../interfaces'\r\n\r\n// TodoList components\r\nconst TodoList = (props: TodoListInterface) => {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul>\r\n        {props.todos.map((todo) => (\r\n          <li key={todo.id}>\r\n            <TodoItem\r\n              todo={todo}\r\n              handleTodoUpdate={props.handleTodoUpdate}\r\n              handleTodoRemove={props.handleTodoRemove}\r\n              handleTodoComplete={props.handleTodoComplete}\r\n              handleTodoBlur={props.handleTodoBlur}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","// Import dependencies\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\n\n// Import components\nimport TodoForm from \"./components/todo-form\";\nimport TodoList from \"./components/todo-list\";\n\n// Import interfaces\nimport { TodoInterface } from \"./interfaces\";\n\n// Import styles\nimport \"./styles/styles.css\";\n\n// TodoListApp component\nconst TodoListApp = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([]);\n\n  // Creating new todo item\n  function handleTodoCreate(todo: TodoInterface) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Update new todos state\n    newTodosState.push(todo);\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Update existing todo item\n  function handleTodoUpdate(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Find correct todo item to update\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text =\n      event.target.value;\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Remove existing todo item\n  function handleTodoRemove(id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = todos.filter(\n      (todo: TodoInterface) => todo.id !== id\n    );\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Check existing todo item as completed\n  function handleTodoComplete(id: string) {\n    // Copy current todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Find the correct todo item and update its 'isCompleted' key\n    newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted = !newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted;\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Check if todo item has title\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add(\"todo-input-error\");\n    } else {\n      event.target.classList.remove(\"todo-input-error\");\n    }\n  }\n\n  async function chuck() {\n    // let newTodos = [];\n    let set = [];\n\n    let joke = \"\";\n    let jokeID = \"\";\n    let joke2 = \"\";\n    let jokeID2 = \"\";\n    interface Set {\n      id: string;\n      text: string;\n    }\n\n    const newTodosState: TodoInterface[] = [...todos];\n    for (let i = 0; i < 3; i++) {\n      let r = await fetch(\n        \"https://api.chucknorris.io/jokes/random?category=dev\"\n      );\n\n      const data = await r.json();\n\n     \n      joke = data.value;\n      jokeID = data.id;\n\n      var chuck = {\n        id: jokeID,\n        text: joke,\n        isCompleted: false,\n      };\n\n      // Set = {\n      //   id: jokeID,\n      //   text: joke,\n      // };\n      \n      newTodosState.push(chuck);\n    }\n    // newTodos.push(set);\n    setTodos(newTodosState);\n  }\n\n\n  \n  React.useEffect(() => {\n    chuck();\n    \n  }, []);\n\n  return (\n    <div className=\"todo-list-app\">\n      <TodoForm todos={todos} handleTodoCreate={handleTodoCreate} />\n\n      <TodoList\n        todos={todos}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoBlur={handleTodoBlur}\n      />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <TodoListApp />,\n\n  rootElement\n);\n"],"sourceRoot":""}