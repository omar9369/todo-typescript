[{"C:\\Users\\Omar\\todo-app\\src\\index.tsx":"1","C:\\Users\\Omar\\todo-app\\src\\components\\todo-list.tsx":"2","C:\\Users\\Omar\\todo-app\\src\\components\\todo-form.tsx":"3","C:\\Users\\Omar\\todo-app\\src\\components\\todo-item.tsx":"4"},{"size":3481,"mtime":1607238245711,"results":"5","hashOfConfig":"6"},{"size":773,"mtime":1606959775469,"results":"7","hashOfConfig":"6"},{"size":1472,"mtime":1606959778143,"results":"8","hashOfConfig":"6"},{"size":959,"mtime":1606959237464,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"27m695",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Omar\\todo-app\\src\\index.tsx",["20","21","22","23","24"],"// Import dependencies\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\n\n// Import components\nimport TodoForm from \"./components/todo-form\";\nimport TodoList from \"./components/todo-list\";\n\n// Import interfaces\nimport { TodoInterface } from \"./interfaces\";\n\n// Import styles\nimport \"./styles/styles.css\";\n\n// TodoListApp component\nconst TodoListApp = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([]);\n\n  // Creating new todo item\n  function handleTodoCreate(todo: TodoInterface) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Update new todos state\n    newTodosState.push(todo);\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Update existing todo item\n  function handleTodoUpdate(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Find correct todo item to update\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text =\n      event.target.value;\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Remove existing todo item\n  function handleTodoRemove(id: string) {\n    // Prepare new todos state\n    const newTodosState: TodoInterface[] = todos.filter(\n      (todo: TodoInterface) => todo.id !== id\n    );\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Check existing todo item as completed\n  function handleTodoComplete(id: string) {\n    // Copy current todos state\n    const newTodosState: TodoInterface[] = [...todos];\n\n    // Find the correct todo item and update its 'isCompleted' key\n    newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted = !newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted;\n\n    // Update todos state\n    setTodos(newTodosState);\n  }\n\n  // Check if todo item has title\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add(\"todo-input-error\");\n    } else {\n      event.target.classList.remove(\"todo-input-error\");\n    }\n  }\n\n  async function chuck() {\n    // let newTodos = [];\n    let set = [];\n\n    let joke = \"\";\n    let jokeID = \"\";\n    let joke2 = \"\";\n    let jokeID2 = \"\";\n    interface Set {\n      id: string;\n      text: string;\n    }\n\n    const newTodosState: TodoInterface[] = [...todos];\n    for (let i = 0; i < 3; i++) {\n      let r = await fetch(\n        \"https://api.chucknorris.io/jokes/random?category=dev\"\n      );\n\n      const data = await r.json();\n\n     \n      joke = data.value;\n      jokeID = data.id;\n\n      var chuck = {\n        id: jokeID,\n        text: joke,\n        isCompleted: false,\n      };\n\n      // Set = {\n      //   id: jokeID,\n      //   text: joke,\n      // };\n      \n      newTodosState.push(chuck);\n    }\n    // newTodos.push(set);\n    setTodos(newTodosState);\n  }\n\n\n  \n  React.useEffect(() => {\n    chuck();\n    \n  }, []);\n\n  return (\n    <div className=\"todo-list-app\">\n      <TodoForm todos={todos} handleTodoCreate={handleTodoCreate} />\n\n      <TodoList\n        todos={todos}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoBlur={handleTodoBlur}\n      />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <TodoListApp />,\n\n  rootElement\n);\n",["25","26"],"C:\\Users\\Omar\\todo-app\\src\\components\\todo-list.tsx",[],"C:\\Users\\Omar\\todo-app\\src\\components\\todo-form.tsx",[],"C:\\Users\\Omar\\todo-app\\src\\components\\todo-item.tsx",[],{"ruleId":"27","severity":1,"message":"28","line":84,"column":9,"nodeType":"29","messageId":"30","endLine":84,"endColumn":12},{"ruleId":"27","severity":1,"message":"31","line":88,"column":9,"nodeType":"29","messageId":"30","endLine":88,"endColumn":14},{"ruleId":"27","severity":1,"message":"32","line":89,"column":9,"nodeType":"29","messageId":"30","endLine":89,"endColumn":16},{"ruleId":"27","severity":1,"message":"33","line":90,"column":15,"nodeType":"29","messageId":"30","endLine":90,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":129,"column":6,"nodeType":"36","endLine":129,"endColumn":8,"suggestions":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},"@typescript-eslint/no-unused-vars","'set' is assigned a value but never used.","Identifier","unusedVar","'joke2' is assigned a value but never used.","'jokeID2' is assigned a value but never used.","'Set' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'chuck'. Either include it or remove the dependency array.","ArrayExpression",["42"],"no-native-reassign",["43"],"no-negated-in-lhs",["44"],{"desc":"45","fix":"46"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [chuck]",{"range":"47","text":"48"},[3017,3019],"[chuck]"]